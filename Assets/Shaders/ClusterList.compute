// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel PointMove
#pragma kernel ClusterMove
#define COMPUTESHADER
#include "CGINC/Procedural.cginc"
struct ClusterMeshData
{
    float3 extent;
    float3 position;
};
globallycoherent RWStructuredBuffer<Point> verticesBuffer;
globallycoherent RWStructuredBuffer<ClusterMeshData> clusterBuffer;
uint2 _RemoveVar;   //X: start Pos Y: endPos
[numthreads(1,CLUSTERCLIPCOUNT,1)]
void PointMove (uint2 id : SV_DISPATCHTHREADID)
{
    uint targetIndex = id.x + _RemoveVar.y;
    Point p = verticesBuffer[targetIndex * CLUSTERCLIPCOUNT + id.y];
    uint index = id.x + _RemoveVar.x;
    verticesBuffer[index * CLUSTERCLIPCOUNT + id.y] = p;
}
uint _Count;
[numthreads(256, 1, 1)]
void ClusterMove (uint id : SV_DISPATCHTHREADID)
{
    if(id >= _Count) return;
    uint targetIndex = id + _RemoveVar.y;
    ClusterMeshData meshData = clusterBuffer[targetIndex];
    uint index = id + _RemoveVar.x;
    clusterBuffer[index] = meshData;
}